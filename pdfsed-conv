#! /usr/bin/env python2
# -*- coding: utf-8 -*-
#
# Copyright (c) 2014, Sergey Kolchin <me@ksa242.name>
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met: 
# 
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution. 
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

"""hOCR <-> djvused convertion utility.

Converts positioned OCR output from/to hOCR/djvused, or to plain text.
Conversion is done with forced recalculation of bounding boxes with optional
scaling of the coordinates.

Available options are:

    -h, --help
 
        Show this usage help.
 
    -v, --verbose
 
        Be extra verbose when parsing errors occur.
 
    -i, --input=FILE
    -o, --output=FILE
 
        Input/output file name (default: read from stdin, write to stdout).
 
    -f, --from=FORMAT
    -t, --to=FORMAT
 
        Input/output file format: hocr, djvused, or txt.
        If not set, will be guessed from input/output file name.
        Plain text format is for output only!
 
    -s, --scale=FACTOR
 
        Scale the coordinates uniformly by the FACTOR (default: 1.0).
        The factor will be rounded to three decimal digits.
"""

import logging
import os.path
import sys
from getopt import getopt

import pdfsed
import pdfsed.djvused
import pdfsed.hocr
import pdfsed.txt


UTIL_NAME = 'pdfsed-conv'
UTIL_VERSION = '0.0.1'


def print_usage_help():
    """Print the utility usage help."""
    print('%s, v%s' % (UTIL_NAME, UTIL_VERSION))
    print('Copyright (C) 2014, Sergey Kolchin <me@ksa242.name>\n')
    print(__doc__)


def guess_file_format(file_ext):
    """Guess file format from a file extension."""
    file_ext = file_ext.lower()
    if file_ext in ('hocr', 'htm', 'html'):
        return 'hocr'
    elif file_ext in ('djvused', 'txt'):
        return file_ext
    else:
        raise ValueError('Unknown file format: %s' % (file_ext, ))


if __name__ == '__main__':
    logging.basicConfig(stream=sys.stderr, level=logging.INFO,
                        format='%(levelname)s: %(name)s: %(message)s')

    debug = False

    input_file_name = ''
    input_file = sys.stdin
    input_format = ''

    output_file_name = ''
    output_file = sys.stdout
    output_format = ''

    scale_factor = 1.00

    opts, args = getopt(sys.argv[1:], '?hvi:o:f:t:s:', (
        'help',
        'verbose',
        'input=',
        'output=',
        'from=',
        'to=',
        'scale=',
    ))
    for opt, val in opts:
        if opt in ('-?', '-h', '--help'):
            print_usage_help()
            sys.exit(0)
        elif opt in ('-v', '--verbose'):
            debug = True
        elif opt in ('-i', '--input'):
            try:
                input_file = open(val, 'rt')
            except IOError as err:
                logging.error('open(%s): %s', val, err.args[0])
                sys.exit(1)
            else:
                input_file_name = val
        elif opt in ('-o', '--output'):
            try:
                output_file = open(val, 'wt')
            except IOError as err:
                logging.error('open(%s): %s', val, err.args[0])
                sys.exit(1)
            else:
                output_file_name = val
        elif opt in ('-f', '--from'):
            input_format = val
        elif opt in ('-t', '--to'):
            output_format = val
        elif opt in ('-s', '--scale'):
            try:
                scale_factor = round(float(val), 3)
                if scale_factor <= 0.001:
                    raise ValueError()
            except ValueError:
                logging.error('Invalid scale factor: positive non-zero float number expected, got %s', val)
                sys.exit(1)

    if not input_format:
        if not input_file_name:
            print_usage_help()
            sys.exit(0)
        else:
            input_format = os.path.splitext(input_file_name)[-1]
    try:
        input_format = guess_file_format(input_format)
        if input_format == 'txt':
            raise ValueError("Can't read TXT files.")
    except ValueError as err:
        logging.error(err.args[0])
        sys.exit(1)

    if not output_format:
        if not output_file_name:
            print_usage_help()
            sys.exit(0)
        else:
            output_format = os.path.splitext(output_file_name)[-1]
    try:
        output_format = guess_file_format(output_format)
    except ValueError as err:
        logging.error(err.args[0])
        sys.exit(1)

    result = 0
    loader = (input_format == 'hocr' and pdfsed.hocr.load) or \
             pdfsed.djvused.load
    saver = (output_format == 'hocr' and pdfsed.hocr.save) or \
            (output_format == 'djvused' and pdfsed.djvused.save) or \
            pdfsed.txt.save
    try:
        page = loader(input_file)
        saver(pdfsed.recalculate_bbox(page, scale_factor), output_file)
    except ValueError as err:
        result = 1
        if debug:
            raise err
        else:
            logging.error(err.args[0])
    finally:
        output_file.close()
        input_file.close()
    sys.exit(result)
