#! /usr/bin/env python2
# -*- coding: utf-8 -*-
#
# Copyright (c) 2014, Sergey Kolchin <me@ksa242.name>
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met: 
# 
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution. 
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

r"""Scripted PDF composer.

pdfsed-run builds a PDF file from a stack of images with optional hidden text,
acting according to a simple script.  Run it like this:

    pdfsed-run [script-file] [pdf-file]

Use "-" for stdin (script file, default) and stdout (pdf file, default).


The script syntax is simple:

    command [argument ...];


Arguments can be int/float numbers, hex numbers (0xHH), strings, and atoms:

*   strings must be enclosed in double quotes; escape with back-slashes;

*   all lengths and coordinates must be in points, int or float;

*   (0, 0) coordinates are at the bottom-left corner of the page/image;

*   angle arguments must be in degrees (counter-clockwise);

*   colors (RGB only) should be specified as hex numbers: 0xRRGGBB;

*   atoms must match /^[a-z][a-z\d\-]*[a-z]$/i regexp (commands are atoms!),
    and are case-insensitive; from here on atoms will be typed in upper-case
    for distinction.


Available commands are:

    SET-TITLE "title"

        Sets the document title.  Expects title text as single argument.

    SET-AUTHOR "author"

        Sets the document author.  Expects author name as single argument.
 
    CREATE-PAGE [width height] [rotation-angle]

        Creates a new page.  Expects up to three int/float arguments: width
        and height pair (in points), and rotation angle (in degrees,
        counter-clockwise).  First page must have width/height pair present;
        all consecutive pages will inherit the size until told overwise.
        Rotation angle is optional and IS NOT inheritable.
 
    DRAW-IMAGE "file-name" [DPI dpi] [POS x y] [MASK color]

        Draws an image on the current page.  First argument is the image file
        name, and is mandatory.  Optional arguments are:
 
        DPI dpi

            Image DPI (overrides automatic detection), defaults to 72 if
            automatic detection fails and not overriden.
 
        POS x y

            Image offset in points, defaults to (0, 0).
 
        MASK color

            Transparent color (mask) for the image (default: none).  Use
            0xRRGGBB hex number for readability, although a simple int will do.
 
    DRAW-TEXT "file-name" [DPI dpi] [POS x y] [SCALE factor]

        Draws a hidden text on the current page.  First argument is the text
        layout script file name, and is mandatory.  Both hOCR
        (.hocr/.htm/.html) and djvused (.djvused) file types are supported.
        Optional arguments are:
 
        DPI dpi

            Layout file's DPI, i. e. the DPI of the image file you've OCRed.
            The script will try to calculate that for you (after the scaling,
            see below), which should be all right for the typical case of the
            text covering the whole page.
 
        POS x y

            Text offset in points, to match the OCRed image.  Defaults to
            (0, 0).
 
        SCALE factor

            Layout file's scaling factor, defaults to 1.0 (no scaling).
        

If everything went well, you'll get a searchable PDF file out of your stack of
OCRed images and text layouts.  It is recommended to run the PDF file through
an optimizer like QPDF, as reportlab's compression handling is not that good.
"""

import base64, logging, re, zlib
from StringIO import StringIO

import reportlab.pdfgen.canvas
import reportlab.pdfbase.pdfmetrics
import reportlab.pdfbase.ttfonts
import PIL.Image

import pdfsed
import pdfsed.hocr
import pdfsed.djvused


UTIL_NAME = 'pdfsed-run'
UTIL_VERSION = '0.0.2'

PDFSED_INT_PATTERN = re.compile(r'^\d+$')
PDFSED_HEXINT_PATTERN = re.compile(r'^0x[a-f\d]+$', re.IGNORECASE)
PDFSED_FLOAT_PATTERN = re.compile(r'^\d*\.\d+$')

WHITESPACES = ' \t\r\n'

DEFAULT_DPI = 72

INVISIBLE_FONT_SIZE = 8
INVISIBLE_FONT_NAME = 'Invisible'
INVISIBLE_FONT_FILE = StringIO(zlib.decompress(base64.decodestring("""
eJzdlk1sG0UUx/+zs3btNEmrUKpCPxikSqRS4jpfFURUagmkEQQoiRXgAl07Y3vL2mvt2ml8APXG
hQPiUEGEVDhWVHyIC1REPSAhBOWA+BCgSoULUqsKcWhVBKjhzfPU+VCi3Flrdn7vzZv33ryZ3TUE
gC6chsTx8fHck1ONd98D0jnS7jn26GPjyMIleZhk9fT0wcHFl1/9GRDPkTxTqHg1dMkzJH9CbbTk
xbWlJfKEdB+Np0pBswi+nH/Nvay92VtfJp4nvEztUJkUHXsdksUOkveXK/X5FNuLD838ICx4dv4N
I1e8+ZqbxwCNP2jyqXoV/fmhy+WW/2SqFsb1pX68SfEpZ/TCrI3aHzcP//jitodvYmvL+6Xcr5mV
vb1ScCzRnPRPfz+LsRSWNasuwRrZlh1sx0E8AriddyzEDfE6EkglFhJDJO5u9fJbFJ0etEMB78D5
4Djm/7kjT0wqhSNURyS+u/2MGJKRu+0ExNkrt1pJti9p2x6b3TBJgmUXuzgnDmI8UWMbkVxeinCw
Mo311/l/v3rF7+01D+OkZYE0PrbsYAu+sSyxU0jLLtIiYzmBrFiwnCT9FcsdOOK8ZHbFleSn0znP
nDCnxbnAnGT9JeYtrP+FOcV8nTlNnsoc3bBAD85adtCNRcsSffjBsoseca/lBE7Q09LiJOm/ttyB
0+IqcwfncJt5q4krO5k7jV7uY+5m7mPebuLKUea7iHvk48w72OYF5rvZT8C8k/WvMN/Dc19j3s02
bzPvZZv3me9j/ox5P9t/xdzPzPVJcc7yGnPL/1+GO1lPVTXM+VNWOTRRg0YRHgrUK5yj1kvaEA1E
xAWiCtl4qJL2ADKkG6Q3XxYjzEcR0E9hCj5KtBd1xCxp6jV5mKP7LJBr1nTRK2h1TvU2w0akCmGl
5lWbBzJqMJsdyaijQaCm/FK5HqspHetoTtMsn4LO0T2mlqcwmlTVOT/28wGhCVKiNANKLiJRlxqB
F603axQznIzRhDSq6EWZ4UUs+xud0VHsh1U1kMlmNwu9kTuFaRqpURU0VS3PVmZ0iE7gct0MG/8+
2fmUvKlfRLYmisd1w8pk1LSu1XUlryM1MNTH9epTftWv+16gIh1oL9abJZyjrfF5a4qccp3oFAcz
Wxxx4DpvlaKKxuytRDzeth5rW4W8qBFesvEX8RFRmLBHoB+TpCmRVCCb1gFCruzHqhhW6+qUF6tC
pL26nlWN2K+W1LhRjxlVGKmRTFYVo7CiJug09E+GJb+QocMCPMWBK1wvEOfRFF2U0klK8CppqqvG
pylRc2Zn+XDQWZIL8iO5KC9S+1RekOex1uOyZGR/w/Hf1lhzqVfFsxE39B/ws7Rm3N3nDrhPuMfc
w3R/aE28KsfY2J+RPNp+j+KaOoCey4h+Dd48b9O5G0v2K7j0AM6s+5WQ/E0wVoK+pA6/3bup7bJf
CMGjwvxTsr74/f/F95m3TH9x8o0/TU//N+7/D/ScVcA=
""")))


def _read_pdfsed_atom(buf):
    atom = None

    i = 0
    while buf[i] in WHITESPACES:
        i += 1

    j = i
    if buf[j] == ';':
        # End of command
        atom, buf = None, buf[j + 1:]

    elif buf[j] == '"':
        atom = ''
        while True:
            j += 1
            if buf[j] == '\\' and buf[j - 1] != '\\':
                continue
            elif buf[j] == '"' and buf[j - 1] != '\\':
                # End of string
                break
            else:
                atom += buf[j]
        atom, buf = atom.decode('utf-8').strip(), buf[j + 1:]

    else:
        while buf[j] not in WHITESPACES and buf[j] != ';':
            j += 1
        atom, buf = buf[i:j].lower(), buf[j:]
        if PDFSED_INT_PATTERN.match(atom):
            atom = int(atom, 10)
        elif PDFSED_HEXINT_PATTERN.match(atom):
            atom = int(atom, 16)
        elif PDFSED_FLOAT_PATTERN.match(atom):
            atom = float(atom)

    return atom, buf


def _read_pdfsed_cmd(buf):
    cmd = None
    args = []

    cmd, buf = _read_pdfsed_atom(buf)
    if cmd is not None:
        while True:
            arg, buf = _read_pdfsed_atom(buf)
            if arg is not None:
                args.append(arg)
            else:
                break

    return cmd, args, buf


def read_pdfsed_script(file_):
    buf = ''
    while True:
        try:
            cmd, args, buf = _read_pdfsed_cmd(buf)
        except IndexError:
            last_buf_len = len(buf)
            buf += file_.read(128)
            if len(buf) == last_buf_len:
                # End of file
                return
        else:
            if cmd is not None:
                yield cmd, args


def _add_invisible_font(canvas):
    reportlab.pdfbase.pdfmetrics.registerFont(
       reportlab.pdfbase.ttfonts.TTFont(INVISIBLE_FONT_NAME,
                                        INVISIBLE_FONT_FILE)
    )
    canvas.setFont(INVISIBLE_FONT_NAME, INVISIBLE_FONT_SIZE)


def _create_page(canvas, page_num, width=0, height=0, rotation=0):
    if page_num > 0:
        # Render previous page.
        canvas.showPage()
    elif width <= 0 or height <= 0:
        # First page has to have width and height.
        raise ValueError('First page has to have width and height (in points).')

    info = 'Page %d' % (page_num + 1, )
    if width > 0 and height > 0:
        info += ', size %d x %d pt' % (width, height)
    else:
        info += ', same size'
    info += ', rotation %d deg.' % (rotation, )
    logging.info(info)

    if width > 0 and height > 0:
        canvas.setPageSize((width, height))

    canvas.setPageRotation(rotation)

    return page_num + 1


def _draw_image(canvas, file_name, *args):
    logging.info('Drawing image %s.', file_name)

    dpi = DEFAULT_DPI
    x = y = 0.0
    mask = None

    image = PIL.Image.open(file_name)
    width, height = image.size
    try:
        dpi = image.info['dpi'][0]
    except KeyError:
        logging.warn('Could not determine %s DPI.', file_name)
    del image

    for i, arg in enumerate(args):
        if arg == 'dpi':
            dpi = args[i + 1]
        elif arg == 'pos':
            x, y = args[i + 1:i + 3]
        elif arg == 'mask':
            mask = args[i + 1]

    width, height = [round(v * 72.0 / dpi, 3) for v in (width, height)]

    logging.info('Resolution: %d dpi.', dpi)
    logging.info('Size: %d x %d pt.', width, height)
    logging.info('Origin: %.3f x %.3f pt.', x, y)

    if mask is not None:
        logging.info('Transparent color (mask): #%06x (RGB).', mask)
        r, g, b = (mask >> 16, (mask >> 8) & 0xff, mask & 0xff)
        mask = [r, r, g, g, b, b]

    canvas.drawImage(file_name, x, y,
                     width=width, height=height,
                     mask=mask,
                     preserveAspectRatio=True,
                     anchor='c')

    return width, height


def _draw_text(canvas, file_name, *args):
    logging.info('Drawing text from %s', file_name)

    page = {}

    loader = None
    file_ext = file_name.lower().rsplit('.', 1)[-1]
    if file_ext == 'djvused':
        loader = pdfsed.djvused.load
    elif file_ext in ('hocr', 'htm', 'html'):
        loader = pdfsed.hocr.load
    else:
        raise ValueError('Unknown text file %s format.' % (file_name, ))
    with open(file_name, 'rt') as f:
        page = loader(f)

    dpi = 0
    x = y = 0.0
    scale = 1.0
    for i, arg in enumerate(args):
        if arg == 'dpi':
            dpi = args[i + 1]
        elif arg == 'pos':
            x, y = args[i + 1:i + 3]
        elif arg == 'scale':
            scale = float(args[i + 1], 3)

    page = pdfsed.recalculate_bbox(page, scale)

    if dpi <= 0:
        # Dirty hack: there is no other way to get the page size.
        dpi = round((72.0 * page['bbox'][2] / canvas._pagesize[0]) / 2 +
                    (72.0 * page['bbox'][3] / canvas._pagesize[1]) / 2)

    logging.info('Resolution: %d dpi.', dpi)
    logging.info('Origin: %.3f x %.3f pt.', x, y)
    logging.info('Scale: %.3f.', scale)

    ncolumn = npara = nline = nword = 0
    for column in page['content']:
        ncolumn += 1

        for para in column['content']:
            npara += 1

            for line in para['content']:
                nline += 1

                for word in line['content']:
                    nword += 1

                    content = word['content']
                    content_width = \
                        canvas.stringWidth(content, INVISIBLE_FONT_NAME,
                                                    INVISIBLE_FONT_SIZE)

                    bbox = [round(v * 72.0 / dpi, 3) for v in word['bbox']]
                    bbox[0] += x
                    bbox[1] += y
                    bbox[2] += x
                    bbox[3] += y
                    bbox_width = bbox[2] - bbox[0]

                    text = canvas.beginText()
                    text.setFont(INVISIBLE_FONT_NAME, INVISIBLE_FONT_SIZE)
                    text.setTextRenderMode(3)  # Invisible text mode
                    text.setTextOrigin(bbox[0], bbox[1])
                    text.setHorizScale(100.0 * bbox_width / content_width)
                    text.textLine(content)
                    canvas.drawText(text)

    logging.info('Rendered %d words, %d lines, %d paragraphs, %d columns.',
                 nword, nline, npara, ncolumn)


if __name__ == '__main__':
    import os, sys

    logging.basicConfig(stream=sys.stderr, level=logging.INFO,
                        format='%(levelname)s: %(name)s: %(message)s')

    working_path = os.path.curdir
    script_file = sys.stdin
    pdf_file = sys.stdout

    if len(sys.argv) > 1:
        if sys.argv[1] in ('-h', '-?', '--help'):
            print('%s v%s' % (UTIL_NAME, UTIL_VERSION))
            print('Copyright (C) 2014, Sergey Kolchin <me@ksa242.name>\n')
            print(__doc__)
            sys.exit(0)

        if sys.argv[1] != '-':
            try:
                script_file = open(sys.argv[1], 'rt')
            except IOError as err:
                logging.error('Failed opening script file %s: %s',
                              sys.argv[1], err.args[0])
                sys.exit(1)
            else:
                working_path = os.path.dirname(sys.argv[1]) or os.path.curdir

        if len(sys.argv) > 2:
            if sys.argv[2] != '-':
                try:
                    pdf_file = open(sys.argv[2], 'wb')
                except IOError as err:
                    logging.error('Failed creating PDF output file %s: %s',
                                  sys.argv[2], err.args[0])
                    sys.exit(1)

    canvas = reportlab.pdfgen.canvas.Canvas(pdf_file, pageCompression=True)
    canvas.setCreator('%s v%s' % (UTIL_NAME, UTIL_VERSION))

    _add_invisible_font(canvas)

    page_num = 0

    for cmd, args in read_pdfsed_script(script_file):
        if cmd == 'set-title':
            title = args[0]
            logging.info('Document title: %s.', title)
            canvas.setTitle(title)

        elif cmd == 'set-author':
            author = args[0]
            logging.info('Document author: %s.', author)
            canvas.setAuthor(author)

        elif cmd == 'create-page':
            if page_num == 0 and len(args) < 2:
                raise ValueError('Please specify the first page size (in points).')

            if len(args) != 3:
                args = (args + [0, 0, 0])[:3]
            
            page_num = _create_page(canvas, page_num, *args)

        elif cmd == 'draw-image':
            if len(args) < 1:
                raise ValueError('Image file name is required.')

            if not args[0].startswith(os.path.sep):
                args[0] = os.path.join(working_path, args[0])

            _draw_image(canvas, *args)

        elif cmd == 'draw-text':
            if len(args) < 1:
                raise ValueError('Text file name is required.')

            if not args[0].startswith(os.path.sep):
                args[0] = os.path.join(working_path, args[0])

            _draw_text(canvas, *args)

        else:
            logging.warn('Unknown command %s, arguments: %s', cmd, args)

    if page_num > 0:
        logging.info('%d page(s) created.', page_num)
        canvas.showPage()
        canvas.save()
